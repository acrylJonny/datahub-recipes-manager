{{- if .Values.backup.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "datahub-recipes-manager.fullname" . }}-backup
  labels:
    {{- include "datahub-recipes-manager.labels" . | nindent 4 }}
    app.kubernetes.io/component: backup
spec:
  schedule: {{ .Values.backup.schedule | quote }}
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            {{- include "datahub-recipes-manager.selectorLabels" . | nindent 12 }}
            app.kubernetes.io/component: backup
        spec:
          {{- with .Values.imagePullSecrets }}
          imagePullSecrets:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          serviceAccountName: {{ include "datahub-recipes-manager.serviceAccountName" . }}
          securityContext:
            {{- toYaml .Values.podSecurityContext | nindent 12 }}
          volumes:
            - name: backup-storage
              persistentVolumeClaim:
                claimName: {{ include "datahub-recipes-manager.fullname" . }}-backup
            - name: data
              persistentVolumeClaim:
                claimName: {{ include "datahub-recipes-manager.fullname" . }}-data
            {{- if .Values.persistence.enabled }}
            - name: recipes
              persistentVolumeClaim:
                claimName: {{ include "datahub-recipes-manager.fullname" . }}-recipes
            - name: templates
              persistentVolumeClaim:
                claimName: {{ include "datahub-recipes-manager.fullname" . }}-templates
            - name: metadata
              persistentVolumeClaim:
                claimName: {{ include "datahub-recipes-manager.fullname" . }}-metadata
            {{- end }}
          containers:
            - name: backup
              securityContext:
                {{- toYaml .Values.securityContext | nindent 16 }}
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              command:
                - "/bin/sh"
                - "-c"
                - |
                  # Create timestamp for the backup
                  TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
                  BACKUP_DIR="/backups/${TIMESTAMP}"
                  mkdir -p ${BACKUP_DIR}
                  
                  echo "Starting backup process at $(date)"
                  
                  # Backup SQLite database
                  echo "Backing up database..."
                  if [ -f /data/recipes_manager.db ]; then
                    cp /data/recipes_manager.db ${BACKUP_DIR}/recipes_manager.db
                  elif [ -f /data/db.sqlite3 ]; then
                    cp /data/db.sqlite3 ${BACKUP_DIR}/db.sqlite3
                  else
                    echo "Warning: No database file found"
                  fi
                  
                  # Backup mounted volumes (recipes, templates, metadata)
                  echo "Backing up recipe files..."
                  if [ -d /recipes ] && [ "$(ls -A /recipes)" ]; then
                    tar -czf ${BACKUP_DIR}/recipes.tar.gz -C /recipes .
                  else
                    echo "Warning: No recipe files found"
                  fi
                  
                  echo "Backing up template files..."
                  if [ -d /templates ] && [ "$(ls -A /templates)" ]; then
                    tar -czf ${BACKUP_DIR}/templates.tar.gz -C /templates .
                  else
                    echo "Warning: No template files found"
                  fi
                  
                  echo "Backing up metadata-manager files..."
                  if [ -d /metadata ] && [ "$(ls -A /metadata)" ]; then
                    tar -czf ${BACKUP_DIR}/metadata.tar.gz -C /metadata .
                  else
                    echo "Warning: No metadata files found"
                  fi
                  
                  # Create backup info file
                  echo "Creating backup manifest..."
                  cat > ${BACKUP_DIR}/backup_info.json << EOF
                  {
                    "timestamp": "${TIMESTAMP}",
                    "application": "datahub-recipes-manager",
                    "version": "{{ .Chart.AppVersion }}",
                    "files": [
                      "recipes_manager.db",
                      "recipes.tar.gz",
                      "templates.tar.gz",
                      "metadata.tar.gz"
                    ],
                    "retention_days": {{ .Values.backup.retention.days }}
                  }
                  EOF
                  
                  # Set proper permissions
                  chmod -R 755 ${BACKUP_DIR}
                  
                  echo "Backup completed at $(date)"
                  echo "Backup stored at: ${BACKUP_DIR}"
                  
                  # Clean up old backups
                  echo "Cleaning up backups older than {{ .Values.backup.retention.days }} days..."
                  find /backups -maxdepth 1 -mindepth 1 -type d -mtime +{{ .Values.backup.retention.days }} -exec rm -rf {} \;
                  
                  echo "Backup process completed successfully"
              resources:
                {{- toYaml .Values.backup.resources | nindent 16 }}
              volumeMounts:
                - name: backup-storage
                  mountPath: /backups
                - name: data
                  mountPath: /data
                  readOnly: true
                {{- if .Values.persistence.enabled }}
                - name: recipes
                  mountPath: /recipes
                  readOnly: true
                - name: templates
                  mountPath: /templates
                  readOnly: true
                - name: metadata
                  mountPath: /metadata
                  readOnly: true
                {{- end }}
          restartPolicy: OnFailure
---
{{- if .Values.backup.enabled }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "datahub-recipes-manager.fullname" . }}-backup
  labels:
    {{- include "datahub-recipes-manager.labels" . | nindent 4 }}
    app.kubernetes.io/component: backup
spec:
  accessModes:
    - ReadWriteOnce
  {{- if .Values.backup.storage.storageClass }}
  storageClassName: {{ .Values.backup.storage.storageClass }}
  {{- end }}
  resources:
    requests:
      storage: {{ .Values.backup.storage.size }}
{{- end }}
{{- end }} 