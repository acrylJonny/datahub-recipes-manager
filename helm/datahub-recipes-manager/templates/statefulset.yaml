apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "datahub-recipes-manager.fullname" . }}
  labels:
    {{- include "datahub-recipes-manager.labels" . | nindent 4 }}
spec:
  serviceName: {{ include "datahub-recipes-manager.fullname" . }}
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "datahub-recipes-manager.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "datahub-recipes-manager.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "datahub-recipes-manager.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["./run_web_ui.sh"]
          args: 
            - "production"
            - "--host"
            - "{{ .Values.config.uvicorn.host }}"
            - "--port"
            - "{{ .Values.config.uvicorn.port }}"
            - "--workers"
            - "{{ .Values.config.uvicorn.workers }}"
            - "--log-level"
            - "{{ .Values.config.uvicorn.logLevel }}"
          ports:
            - name: http
              containerPort: {{ .Values.config.uvicorn.port }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health/
              port: http
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health/
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          env:
            - name: DEBUG
              value: "{{ .Values.config.debug }}"
            - name: DJANGO_SETTINGS_MODULE
              value: "web_ui.settings"
            - name: DATAHUB_URL
              value: "{{ .Values.config.datahubUrl }}"
            - name: DATABASE_URL
              value: "sqlite:////data/recipes_manager.db"
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "datahub-recipes-manager.fullname" . }}
                  key: secret-key
            - name: DATAHUB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ include "datahub-recipes-manager.fullname" . }}
                  key: datahub-token
          volumeMounts:
            - name: data
              mountPath: /data
            - name: recipes
              mountPath: /app/recipes
            - name: templates
              mountPath: /app/templates
            - name: metadata
              mountPath: /app/metadata-manager
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "{{ .Values.persistence.volumes.data.accessMode }}" ]
      {{- if .Values.persistence.storageClass }}
      {{- if (eq "-" .Values.persistence.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: "{{ .Values.persistence.storageClass }}"
      {{- end }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistence.volumes.data.size }}
  - metadata:
      name: recipes
    spec:
      accessModes: [ "{{ .Values.persistence.volumes.recipes.accessMode }}" ]
      {{- if .Values.persistence.storageClass }}
      {{- if (eq "-" .Values.persistence.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: "{{ .Values.persistence.storageClass }}"
      {{- end }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistence.volumes.recipes.size }}
  - metadata:
      name: templates
    spec:
      accessModes: [ "{{ .Values.persistence.volumes.templates.accessMode }}" ]
      {{- if .Values.persistence.storageClass }}
      {{- if (eq "-" .Values.persistence.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: "{{ .Values.persistence.storageClass }}"
      {{- end }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistence.volumes.templates.size }}
  - metadata:
      name: metadata
    spec:
      accessModes: [ "{{ .Values.persistence.volumes.metadata.accessMode }}" ]
      {{- if .Values.persistence.storageClass }}
      {{- if (eq "-" .Values.persistence.storageClass) }}
      storageClassName: ""
      {{- else }}
      storageClassName: "{{ .Values.persistence.storageClass }}"
      {{- end }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.persistence.volumes.metadata.size }} 