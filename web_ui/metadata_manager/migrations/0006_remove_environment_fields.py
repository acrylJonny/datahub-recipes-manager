# Generated by Django on 2025-01-XX XX:XX

from django.db import migrations, models


def assign_default_connection_to_metadata(apps, schema_editor):
    """Assign all existing metadata records to the default connection"""
    # Get models
    Connection = apps.get_model('web_ui', 'Connection')
    Tag = apps.get_model('metadata_manager', 'Tag')
    Domain = apps.get_model('metadata_manager', 'Domain')
    GlossaryTerm = apps.get_model('metadata_manager', 'GlossaryTerm')
    GlossaryNode = apps.get_model('metadata_manager', 'GlossaryNode')
    StructuredProperty = apps.get_model('metadata_manager', 'StructuredProperty')
    DataProduct = apps.get_model('metadata_manager', 'DataProduct')
    Assertion = apps.get_model('metadata_manager', 'Assertion')
    Test = apps.get_model('metadata_manager', 'Test')
    
    # Get the default connection
    default_connection = Connection.objects.filter(is_default=True).first()
    if not default_connection:
        # If no default connection exists, get the first one
        default_connection = Connection.objects.first()
    
    if default_connection:
        # Update all metadata records to use the default connection
        models_to_update = [
            Tag, Domain, GlossaryTerm, GlossaryNode, 
            StructuredProperty, DataProduct, Assertion, Test
        ]
        
        for model in models_to_update:
            # Only update records that don't already have a connection
            model.objects.filter(connection__isnull=True).update(connection=default_connection)


def reverse_assign_default_connection(apps, schema_editor):
    """Reverse operation - clear connection assignments"""
    # Get models
    Tag = apps.get_model('metadata_manager', 'Tag')
    Domain = apps.get_model('metadata_manager', 'Domain')
    GlossaryTerm = apps.get_model('metadata_manager', 'GlossaryTerm')
    GlossaryNode = apps.get_model('metadata_manager', 'GlossaryNode')
    StructuredProperty = apps.get_model('metadata_manager', 'StructuredProperty')
    DataProduct = apps.get_model('metadata_manager', 'DataProduct')
    Assertion = apps.get_model('metadata_manager', 'Assertion')
    Test = apps.get_model('metadata_manager', 'Test')
    
    # Clear all connection assignments
    models_to_clear = [
        Tag, Domain, GlossaryTerm, GlossaryNode, 
        StructuredProperty, DataProduct, Assertion, Test
    ]
    
    for model in models_to_clear:
        model.objects.all().update(connection=None)


class Migration(migrations.Migration):
    dependencies = [
        ("metadata_manager", "0005_add_connection_model"),
        ("web_ui", "0003_add_connection_model"),
    ]

    operations = [
        # First, assign all existing metadata to the default connection
        migrations.RunPython(
            assign_default_connection_to_metadata,
            reverse_assign_default_connection,
        ),
        
        # Remove environment_id fields from all metadata models
        migrations.RemoveField(
            model_name="assertion",
            name="environment",
        ),
        migrations.RemoveField(
            model_name="dataproduct",
            name="environment",
        ),
        migrations.RemoveField(
            model_name="domain",
            name="environment",
        ),
        migrations.RemoveField(
            model_name="glossarynode",
            name="environment",
        ),
        migrations.RemoveField(
            model_name="glossaryterm",
            name="environment",
        ),
        migrations.RemoveField(
            model_name="structuredproperty",
            name="environment",
        ),
        migrations.RemoveField(
            model_name="tag",
            name="environment",
        ),
        migrations.RemoveField(
            model_name="test",
            name="environment",
        ),
    ] 