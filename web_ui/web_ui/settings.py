"""
Django settings for web_ui project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-pjjq#$#_ok!i@%p-gzr=!z+2dx$$edrbec9lourhhg$wf1*)f7"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",  # Django REST Framework
    "drf_spectacular",  # OpenAPI 3.0 schema generation
    # Project apps
    "web_ui",
    "policy_manager",
    "script_runner",
    "template_manager",
    "test_runner",
    "metadata_manager",
    "env_vars",
    "environments",
    "policies",
    "recipe_instances",
    "github",
    "metadata_sync",
    # Third-party apps
    "django_extensions",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Custom middleware for DataHub connection info
    "web_ui.middleware.DataHubConnectionMiddleware",
]

ROOT_URLCONF = "web_ui.urls"

# Tell Django to ignore migration checking for metadata_manager app
# This prevents the warnings about model changes that aren't reflected in migrations
# MIGRATION_MODULES = {
#     'metadata_manager': None,
# }

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                # Custom context processor for DataHub config
                "web_ui.context_processors.datahub_config",
                # Make default environment available in all templates
                "web_ui.context_processors.default_environment",
                # Make connections available in all templates
                "web_ui.context_processors.connections_context",
                # Add cache busting for static files
                "web_ui.context_processors.cache_busting",
            ],
        },
    },
]

WSGI_APPLICATION = "web_ui.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(
            BASE_DIR.parent, "db.sqlite3"
        ),  # Use db in project root directory
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]

# Media files (uploaded files)
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# DataHub CI/CD Manager specific settings
DATAHUB_CONFIG_FILE = os.path.join(BASE_DIR.parent, ".env")
SCRIPTS_DIR = os.path.join(BASE_DIR.parent, "scripts")
TEMPLATES_DIR = os.path.join(BASE_DIR.parent, "templates")
RECIPES_DIR = os.path.join(BASE_DIR.parent, "recipes")
POLICIES_DIR = os.path.join(BASE_DIR.parent, "policies")

# Logging Configuration
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "database": {
            "class": "web_ui.log_handlers.DatabaseLogHandler",
            "level": "DEBUG",
            "formatter": "verbose",
        },
    },
    "root": {
        "handlers": ["console", "database"],
        "level": "DEBUG",
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "web_ui": {
            "handlers": ["console", "database"],
            "level": "DEBUG",
            "propagate": False,
        },
        "utils": {
            "handlers": ["console", "database"],
            "level": "DEBUG",
            "propagate": False,
        },
        "metadata_manager": {
            "handlers": ["console", "database"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}

# Ensure logs directory exists
os.makedirs(os.path.join(BASE_DIR, "logs"), exist_ok=True)

# Configure authentication - No login required for local development
LOGIN_URL = "/accounts/login/"
LOGOUT_URL = "/logout/"
LOGIN_REDIRECT_URL = "/"

# Allow anonymous users
AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "web_ui.auth_backends.AnonymousUserBackend",
]

# REST Framework configuration
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
    # Remove authentication requirements for API documentation
    'DEFAULT_PERMISSION_CLASSES': [],
    'DEFAULT_AUTHENTICATION_CLASSES': [],
}

# Spectacular settings for OpenAPI documentation
SPECTACULAR_SETTINGS = {
    'TITLE': 'DataHub Recipes Manager API',
    'DESCRIPTION': 'API documentation for DataHub Recipes Manager - manage DataHub connections, recipes, policies, and metadata',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
    # Remove security schemes from the schema
    'SECURITY': [],
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': False,  # Disable authorization persistence
        'displayOperationId': False,  # Clean up UI
        'filter': True,  # Enable endpoint filtering
        'supportedSubmitMethods': ['get', 'post', 'put', 'delete', 'patch'],
        'tryItOutEnabled': True,
        # Remove the Authorize button completely
        'supportedSubmitMethods': ['get', 'post', 'put', 'delete', 'patch'],
    },
    'TAGS': [
        {'name': 'Connections', 'description': 'DataHub connection management'},
        {'name': 'Recipes', 'description': 'Recipe template and instance management'},
        {'name': 'Policies', 'description': 'DataHub policy management'},
        {'name': 'Metadata', 'description': 'Metadata entity management'},
        {'name': 'Settings', 'description': 'Application settings'},
        {'name': 'Templates', 'description': 'Recipe template management'},
        {'name': 'Environment Variables', 'description': 'Environment variable management'},
        {'name': 'GitHub', 'description': 'GitHub integration endpoints'},
        {'name': 'Dashboard', 'description': 'Dashboard data endpoints'},
    ],
}
