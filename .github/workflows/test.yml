name: Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'datahub-cicd-client/**'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'datahub-cicd-client/**'
      - '.github/workflows/test.yml'

env:
  PYTHON_VERSION: "3.10"

jobs:
  # Code quality checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        working-directory: datahub-cicd-client
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
      
      - name: Run ruff linting
        working-directory: datahub-cicd-client
        run: ruff check .
      
      - name: Run ruff formatting check
        working-directory: datahub-cicd-client
        run: ruff format --check .
      
      - name: Run mypy type checking
        working-directory: datahub-cicd-client
        run: mypy src/datahub_cicd_client
      
      - name: Run black formatting check
        working-directory: datahub-cicd-client
        run: black --check .
      
      - name: Run isort import sorting check
        working-directory: datahub-cicd-client
        run: isort --check-only .

  # Unit tests
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        working-directory: datahub-cicd-client
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"
      
      - name: Run unit tests
        working-directory: datahub-cicd-client
        run: pytest tests/unit/ -v --cov=datahub_cicd_client --cov-report=xml
      
      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.10'
        uses: codecov/codecov-action@v3
        with:
          file: ./datahub-cicd-client/coverage.xml
          flags: unit-tests
          name: unit-tests-${{ matrix.python-version }}

  # Integration tests with DataHub
  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        working-directory: datahub-cicd-client
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Start DataHub services
        working-directory: datahub-cicd-client
        run: |
          docker-compose -f docker-compose.test.yml up -d
          echo "Waiting for DataHub to be ready..."
          
          # Wait for DataHub GMS to be healthy
          timeout 300 bash -c 'until docker-compose -f docker-compose.test.yml exec -T datahub-gms curl -f http://localhost:8080/health; do sleep 10; done'
          
          # Wait for DataHub Frontend to be healthy
          timeout 300 bash -c 'until docker-compose -f docker-compose.test.yml exec -T datahub-frontend-react curl -f http://localhost:9002/admin; do sleep 10; done'
          
          echo "DataHub is ready!"
      
      - name: Ingest test data
        working-directory: datahub-cicd-client
        run: |
          # Copy ingestion script to container and run it
          docker-compose -f docker-compose.test.yml cp tests/scripts/ingest_test_data.py datahub-ingestion:/tmp/
          docker-compose -f docker-compose.test.yml exec -T datahub-ingestion python /tmp/ingest_test_data.py
      
      - name: Wait for data indexing
        run: sleep 30  # Give Elasticsearch time to index the data
      
      - name: Run integration tests
        working-directory: datahub-cicd-client
        env:
          DATAHUB_GMS_URL: http://localhost:8080
          DATAHUB_GMS_TOKEN: ""
        run: pytest tests/integration/ -v --cov=datahub_cicd_client --cov-report=xml -m integration
      
      - name: Upload integration test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./datahub-cicd-client/coverage.xml
          flags: integration-tests
          name: integration-tests
      
      - name: Collect DataHub logs on failure
        if: failure()
        working-directory: datahub-cicd-client
        run: |
          echo "=== DataHub GMS logs ==="
          docker-compose -f docker-compose.test.yml logs datahub-gms
          echo "=== DataHub Frontend logs ==="
          docker-compose -f docker-compose.test.yml logs datahub-frontend-react
          echo "=== Elasticsearch logs ==="
          docker-compose -f docker-compose.test.yml logs elasticsearch
          echo "=== MySQL logs ==="
          docker-compose -f docker-compose.test.yml logs mysql
      
      - name: Stop DataHub services
        if: always()
        working-directory: datahub-cicd-client
        run: docker-compose -f docker-compose.test.yml down -v

  # End-to-end tests (comprehensive workflow tests)
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    timeout-minutes: 45
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        working-directory: datahub-cicd-client
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[test]"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Start DataHub services
        working-directory: datahub-cicd-client
        run: |
          docker-compose -f docker-compose.test.yml up -d
          timeout 300 bash -c 'until docker-compose -f docker-compose.test.yml exec -T datahub-gms curl -f http://localhost:8080/health; do sleep 10; done'
          timeout 300 bash -c 'until docker-compose -f docker-compose.test.yml exec -T datahub-frontend-react curl -f http://localhost:9002/admin; do sleep 10; done'
      
      - name: Run comprehensive E2E tests
        working-directory: datahub-cicd-client
        env:
          DATAHUB_GMS_URL: http://localhost:8080
          DATAHUB_GMS_TOKEN: ""
        run: |
          # Test the complete workflow: ingest -> query -> generate MCPs
          echo "=== Testing complete workflow ==="
          
          # 1. Ingest test data
          docker-compose -f docker-compose.test.yml cp tests/scripts/ingest_test_data.py datahub-ingestion:/tmp/
          docker-compose -f docker-compose.test.yml exec -T datahub-ingestion python /tmp/ingest_test_data.py
          
          # 2. Wait for indexing
          sleep 30
          
          # 3. Run all tests together
          pytest tests/ -v -m "not slow" --cov=datahub_cicd_client --cov-report=xml
      
      - name: Stop DataHub services
        if: always()
        working-directory: datahub-cicd-client
        run: docker-compose -f docker-compose.test.yml down -v

  # Package build test
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build package
        working-directory: datahub-cicd-client
        run: python -m build
      
      - name: Check package
        working-directory: datahub-cicd-client
        run: twine check dist/*
      
      - name: Test package installation
        working-directory: datahub-cicd-client
        run: |
          pip install dist/*.whl
          python -c "import datahub_cicd_client; print('Package installed successfully')"

  # Test summary
  test-summary:
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests, integration-tests, e2e-tests, build-test]
    if: always()
    steps:
      - name: Test Summary
        run: |
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Test Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Test | ${{ needs.build-test.result }} |" >> $GITHUB_STEP_SUMMARY
          
          # Check if any tests failed
          if [[ "${{ needs.code-quality.result }}" == "failure" ]] || \
             [[ "${{ needs.unit-tests.result }}" == "failure" ]] || \
             [[ "${{ needs.integration-tests.result }}" == "failure" ]] || \
             [[ "${{ needs.e2e-tests.result }}" == "failure" ]] || \
             [[ "${{ needs.build-test.result }}" == "failure" ]]; then
            echo "❌ Some tests failed!"
            exit 1
          else
            echo "✅ All tests passed!"
          fi 