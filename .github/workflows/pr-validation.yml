name: PR Validation

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

jobs:
  validate-code:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest flake8
          
      - name: Run linting
        run: |
          flake8 web_ui/ utils/ scripts/ --count --select=E9,F63,F7,F82 --show-source --statistics
          
      - name: Run tests
        run: |
          python -m pytest

  validate-recipes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Validate recipe templates
        run: |
          python scripts/validate_recipe.py --templates recipes/templates/*.yml
          
      - name: Validate recipe instances
        run: |
          python scripts/validate_recipe.py --instances recipes/instances/**/*.yml
          
  validate-secrets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Find referenced secrets
        id: extract-secrets
        run: |
          # Extract secrets from workflows and recipe files
          WORKFLOW_SECRETS=$(grep -r "secrets\." .github/workflows/ | grep -oP "secrets\.\K[A-Za-z0-9_]+" | sort | uniq)
          RECIPE_SECRETS=$(grep -r "\${" recipes/ | grep -oP "\$\{([A-Za-z0-9_]+)\}" | sed 's/\${//g' | sed 's/}//g' | sort | uniq)
          
          echo "Referenced workflow secrets: $WORKFLOW_SECRETS"
          echo "Referenced recipe secrets: $RECIPE_SECRETS"
          
          # Combine all secrets
          ALL_SECRETS="$WORKFLOW_SECRETS $RECIPE_SECRETS"
          echo "all_secrets=$ALL_SECRETS" >> $GITHUB_OUTPUT
          
      - name: Check secret existence
        env:
          # List all possible secrets that might be used
          DATAHUB_GMS_URL: ${{ secrets.DATAHUB_GMS_URL || 'missing' }}
          DATAHUB_TOKEN: ${{ secrets.DATAHUB_TOKEN || 'missing' }}
          DBX_TOKEN: ${{ secrets.DBX_TOKEN || 'missing' }}
          MSSQL_PASSWORD: ${{ secrets.MSSQL_PASSWORD || 'missing' }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD || 'missing' }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD || 'missing' }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD || 'missing' }}
          BIGQUERY_KEYFILE: ${{ secrets.BIGQUERY_KEYFILE || 'missing' }}
        run: |
          MISSING_SECRETS=""
          
          # Check each secret referenced in workflows and recipes
          for SECRET_NAME in ${{ steps.extract-secrets.outputs.all_secrets }}; do
            SECRET_VALUE=$(eval echo \${$SECRET_NAME})
            if [ "$SECRET_VALUE" = "missing" ]; then
              MISSING_SECRETS="$MISSING_SECRETS $SECRET_NAME"
            fi
          done
          
          if [ ! -z "$MISSING_SECRETS" ]; then
            echo "⚠️ Warning: The following referenced secrets are missing: $MISSING_SECRETS"
            echo "Please ensure these secrets are properly configured before merging this PR."
            # Not failing the workflow, just warning
          else
            echo "✅ All referenced secrets are properly configured."
          fi
          
  deployment-preview:
    runs-on: ubuntu-latest
    needs: [validate-code, validate-recipes]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Generate deployment preview
        run: |
          echo "## Deployment Preview" > deployment_preview.md
          echo "The following changes will be deployed when this PR is merged:" >> deployment_preview.md
          echo "" >> deployment_preview.md
          
          # Find modified recipe files
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E 'recipes/instances/.+\.yml')
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No recipe changes detected in this PR." >> deployment_preview.md
          else
            echo "### Changed Recipes:" >> deployment_preview.md
            echo "" >> deployment_preview.md
            for file in $CHANGED_FILES; do
              recipe_name=$(basename "$file" .yml)
              env_name=$(echo "$file" | grep -oP "recipes/instances/\K[^/]+")
              echo "- $recipe_name (Environment: $env_name)" >> deployment_preview.md
            done
          fi
          
          # Find modified policy files
          CHANGED_POLICIES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E 'policies/[^/]+/.+\.json')
          
          if [ ! -z "$CHANGED_POLICIES" ]; then
            echo "" >> deployment_preview.md
            echo "### Changed Policies:" >> deployment_preview.md
            echo "" >> deployment_preview.md
            for file in $CHANGED_POLICIES; do
              policy_name=$(basename "$file" .json)
              env_name=$(echo "$file" | grep -oP "policies/\K[^/]+")
              echo "- $policy_name (Environment: $env_name)" >> deployment_preview.md
            done
          fi
          
      - name: Upload deployment preview
        uses: actions/upload-artifact@v3
        with:
          name: deployment-preview
          path: deployment_preview.md
          
      - name: Comment PR
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            const deploymentPreview = fs.readFileSync('deployment_preview.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: deploymentPreview
            }); 