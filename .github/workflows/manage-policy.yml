name: Manage DataHub Policies

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'list'
        type: choice
        options:
          - list
          - get
          - create
          - update
          - delete
          - export
          - import
      environment:
        description: 'Environment to target'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      policy_id:
        description: 'Policy ID (for get, update, delete actions)'
        required: false
        type: string
      policy_config:
        description: 'Policy JSON config (name, description, type, state, resources, privileges, actors for create/update)'
        required: false
        type: string
      policy_type:
        description: 'Policy type (for create, update actions)'
        required: false
        default: 'METADATA_POLICY'
        type: choice
        options:
          - METADATA_POLICY
          - PLATFORM_POLICY
      policy_state:
        description: 'Policy state (for create, update actions)'
        required: false
        default: 'ACTIVE'
        type: choice
        options:
          - ACTIVE
          - INACTIVE
      export_dir:
        description: 'Directory for export/import policies'
        required: false
        default: 'policies'
        type: string
      import_options:
        description: 'Import options as JSON (skip_existing, force_update)'
        required: false
        default: '{"skip_existing": false, "force_update": false}'
        type: string

jobs:
  manage-policy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Create .env file
        env:
          DATAHUB_TOKEN: ${{ secrets.DATAHUB_TOKEN }}
          DATAHUB_SERVER: ${{ secrets.DATAHUB_SERVER }}
        run: |
          echo "DATAHUB_TOKEN=$DATAHUB_TOKEN" > .env
          echo "DATAHUB_SERVER=$DATAHUB_SERVER" >> .env
          
      - name: Extract policy config
        if: github.event.inputs.action == 'create' || github.event.inputs.action == 'update'
        id: extract_config
        run: |
          echo "POLICY_CONFIG='${{ github.event.inputs.policy_config }}'" >> $GITHUB_ENV
          
      - name: List policies
        if: github.event.inputs.action == 'list'
        run: python scripts/manage_policy.py list
          
      - name: Get policy
        if: github.event.inputs.action == 'get'
        run: python scripts/manage_policy.py get ${{ github.event.inputs.policy_id }}
        
      - name: Create policy
        if: github.event.inputs.action == 'create'
        run: |
          CONFIG='${{ github.event.inputs.policy_config }}'
          
          # Extract values from JSON config
          if [ -n "$CONFIG" ]; then
            POLICY_NAME=$(echo $CONFIG | jq -r '.name // ""')
            POLICY_DESC=$(echo $CONFIG | jq -r '.description // ""')
            POLICY_RESOURCES=$(echo $CONFIG | jq -r '.resources // ""')
            POLICY_PRIVILEGES=$(echo $CONFIG | jq -r '.privileges // ""')
            POLICY_ACTORS=$(echo $CONFIG | jq -r '.actors // ""')
          fi
          
          CMD="python scripts/manage_policy.py create"
          
          if [ -n "$POLICY_NAME" ]; then
            CMD="$CMD --name '$POLICY_NAME'"
          fi
          
          if [ -n "$POLICY_DESC" ]; then
            CMD="$CMD --description '$POLICY_DESC'"
          fi
          
          if [ -n "${{ github.event.inputs.policy_type }}" ]; then
            CMD="$CMD --type '${{ github.event.inputs.policy_type }}'"
          fi
          
          if [ -n "${{ github.event.inputs.policy_state }}" ]; then
            CMD="$CMD --state '${{ github.event.inputs.policy_state }}'"
          fi
          
          if [ -n "$POLICY_RESOURCES" ]; then
            CMD="$CMD --resources '$POLICY_RESOURCES'"
          fi
          
          if [ -n "$POLICY_PRIVILEGES" ]; then
            CMD="$CMD --privileges '$POLICY_PRIVILEGES'"
          fi
          
          if [ -n "$POLICY_ACTORS" ]; then
            CMD="$CMD --actors '$POLICY_ACTORS'"
          fi
          
          echo "Executing: $CMD"
          eval "$CMD"
        
      - name: Update policy
        if: github.event.inputs.action == 'update'
        run: |
          CONFIG='${{ github.event.inputs.policy_config }}'
          
          # Extract values from JSON config
          if [ -n "$CONFIG" ]; then
            POLICY_NAME=$(echo $CONFIG | jq -r '.name // ""')
            POLICY_DESC=$(echo $CONFIG | jq -r '.description // ""')
            POLICY_RESOURCES=$(echo $CONFIG | jq -r '.resources // ""')
            POLICY_PRIVILEGES=$(echo $CONFIG | jq -r '.privileges // ""')
            POLICY_ACTORS=$(echo $CONFIG | jq -r '.actors // ""')
          fi
          
          CMD="python scripts/manage_policy.py update ${{ github.event.inputs.policy_id }}"
          
          if [ -n "$POLICY_NAME" ]; then
            CMD="$CMD --name '$POLICY_NAME'"
          fi
          
          if [ -n "$POLICY_DESC" ]; then
            CMD="$CMD --description '$POLICY_DESC'"
          fi
          
          if [ -n "${{ github.event.inputs.policy_state }}" ]; then
            CMD="$CMD --state '${{ github.event.inputs.policy_state }}'"
          fi
          
          if [ -n "$POLICY_RESOURCES" ]; then
            CMD="$CMD --resources '$POLICY_RESOURCES'"
          fi
          
          if [ -n "$POLICY_PRIVILEGES" ]; then
            CMD="$CMD --privileges '$POLICY_PRIVILEGES'"
          fi
          
          if [ -n "$POLICY_ACTORS" ]; then
            CMD="$CMD --actors '$POLICY_ACTORS'"
          fi
          
          echo "Executing: $CMD"
          eval "$CMD"
        
      - name: Delete policy
        if: github.event.inputs.action == 'delete'
        run: python scripts/manage_policy.py delete ${{ github.event.inputs.policy_id }}
        
      - name: Export policies
        if: github.event.inputs.action == 'export'
        run: |
          mkdir -p ${{ github.event.inputs.export_dir }}
          
          if [ -n "${{ github.event.inputs.policy_id }}" ]; then
            python scripts/export_policy.py --policy-id "${{ github.event.inputs.policy_id }}" --output-dir ${{ github.event.inputs.export_dir }}
          else
            python scripts/export_policy.py --output-dir ${{ github.event.inputs.export_dir }}
          fi
          
          echo "Exported policies:"
          ls -la ${{ github.event.inputs.export_dir }}
        
      - name: Archive exported policies
        if: github.event.inputs.action == 'export'
        uses: actions/upload-artifact@v3
        with:
          name: exported-policies
          path: ${{ github.event.inputs.export_dir }}
          
      - name: Download policies for import
        if: github.event.inputs.action == 'import'
        uses: actions/download-artifact@v3
        with:
          name: exported-policies
          path: ${{ github.event.inputs.export_dir }}
          
      - name: Import policies
        if: github.event.inputs.action == 'import'
        run: |
          ls -la ${{ github.event.inputs.export_dir }}
          
          # Parse import options
          OPTIONS='${{ github.event.inputs.import_options }}'
          SKIP_EXISTING=$(echo $OPTIONS | jq -r '.skip_existing // false')
          FORCE_UPDATE=$(echo $OPTIONS | jq -r '.force_update // false')
          
          CMD="python scripts/import_policy.py --input-dir ${{ github.event.inputs.export_dir }}"
          
          if [ "$SKIP_EXISTING" == "true" ]; then
            CMD="$CMD --skip-existing"
          fi
          
          if [ "$FORCE_UPDATE" == "true" ]; then
            CMD="$CMD --force-update"
          fi
          
          echo "Executing: $CMD"
          eval "$CMD" 